# .github/workflows/release.yml
name: Release

on:
  push:
    tags: ['v*'] # e.g. v1.2.3

permissions:
  contents: write # create GitHub Releases
  checks: read # (if you add API-based gating later)
  id-token: write # npm provenance

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Verify version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "Error: Tag version ($TAG_VERSION) does not match package.json version ($PACKAGE_VERSION)"
            exit 1
          fi
          echo "Version verified: $PACKAGE_VERSION"

      - name: Lint
        run: pnpm run lint

      - name: Build
        run: pnpm run build

      - name: Test
        run: pnpm run test

      - name: Type check
        run: pnpm run test:types

      - name: Smoke test
        run: pnpm run smoke

      - name: Pack preview
        run: pnpm pack --dry-run

      - name: Check if version exists
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if npm view @qvlt/core-logger@$PACKAGE_VERSION version > /dev/null 2>&1; then
            echo "Version $PACKAGE_VERSION already exists on npm"
            exit 1
          fi
          echo "Version $PACKAGE_VERSION is available for publishing"

      - name: Publish to npm
        run: pnpm publish --no-git-checks --provenance
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Installation

            ```bash
            npm install @qvlt/core-logger@${{ github.ref_name }}
            ```

            ## What's Changed

            See the [full changelog](https://github.com/qvlt/core-logger/compare/${{ github.event.before }}...${{ github.ref_name }}) for details.

            ## Documentation

            - [README](https://github.com/qvlt/core-logger#readme)
            - [API Documentation](https://github.com/qvlt/core-logger#api)
          draft: false
          prerelease: false
